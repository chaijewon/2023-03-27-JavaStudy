package com.sist.main;
/*
 *    메모리구조 
 *    ---------------------
 *     MethodArea , static => 컴파일러가 자동 저장 
 *     method도 메모리에 저장
 *     void method()
 *     {
 *        구현부가 있어야 저장이 된다 
 *     } 
 *     => 메소드 선언만 된 경우에는 클래스를 저장하지 못한다 (미완성된 클래스)
 *        (추상클래스 , 인터페이스) => 요구사항 분석 
 *                    -------- 데이터베이스 연결 , 윈도우 , 네트워크 서버
 *                             웹구현 
 *        void method();
 *    ---------------------
 *    Stack : LIFO 
 *            지역변수,매개변수 저장 => 메모리 자체에서 관리 ({}이 종료되면 사라진다)
 *            class A
 *            {
 *               void method()
 *               {
 *                   int a=10;
 *                   if(a%2==0)
 *                   {
 *                      int b=20;
 *                      if(b==20)
 *                      {
 *                         int c=30;
 *                      }// c
 *                   }// b
 *               }// a
 *            } 
 *    ---------------------
 *    Heap : 동적메모리 할당 (new) => 객체변수 , 배열 (참조변수값)
 *           => 관리(프로그래머) => GC(자동메모리 회수)
 *           => 객체=null
 *    A.java ==> A.class ===> 
 *        javac          java
 *    class A =>  인터프리터 => 한줄씩 변역
 *    {
 *       ---
 *       ---
 *       ---new 
 *       ---
 *       ---
 *    }
 *    -------------------------------
 *    변수 => Stack
 *          int a=10;
 *        0------
 *          사용중
 *        4------
 *          사용중
 *        8------
 *          => 값 => 10  ==> 메모리 주소에 대한 별칭 a
 *        12------
 *        
 *    배열 
 *        --------------------
 *            |    |    |
 *        --------------------
 *        
 *    클래스 
 *        ----------------
 *          ----------
 *             1
 *          ----------
 *           "홍길동"
 *          ----------
 *           "남자"
 *          ----------
 *            getName()
 *          ----------
 *            getSex()
 *          ----------
 *        ----------------
 *    클래스 
 *    -----
 *    1. 구성요소 
 *       1) 변수 => 60%
 *          = 인스턴스변수 : 객체마다 메모리를 따로 저장
 *                        => new를 이용해서 메모리 저장공간이 만들어진 경우
 *            A a=new A()
 *              - 인스턴스(객체)
 *              a.변수명
 *          = 정적변수 : 메모리 공간이 한개를 사용한다 (공유변수,클래스변수)
 *            - static    => 컴파일시 자동으로 생성 
 *            클래스명.변수명
 *         ---------------------------- 메소드 호출시에 생성 -----------
 *          = 지역변수 : 기능 처리에 필요한 데이터를 설정 (메소드 종료와 동시에 사라진다)
 *          = 매개변수 : 사용자 요청값 => 메소드 종료와 동시에 사라진다
 *          --- 변수는 반드시 초기화후에 사용한다 
 *                         ----
 *                         자동 초기화 : 클래스영역에 선언된 변수 
 *                                     인스턴스,정적변수는 초기화가 된다
 *                         초기화가 없는 경우 : 지역변수,매개변수
 *          class A
 *          {
 *             String addr;
 *             void Address(String addr)
 *             {
 *                this.addr=addr
 *                
 *             }
 *             void  지도출력()
 *             {
 *                 addr
 *             }
 *             void  근처맛집()
 *             {
 *                 addr
 *             }
 *          }
 *       2) 메소드 : 30% => 명령문의 집합 => 단락(구조적인 프로그램)
 *                         반복수행 (제거) => 재사용 (한가지 기능수행)
 *                         다른 통신 담당 
 *          1. 종류 
 *             인스턴스메소드 : 따로 작동하는 메소드 
 *                String s="Hello Java";
 *                s.substring()
 *                String s1="Hello Oracle";
 *                s1.substring()
 *             정적메소드 : 동시에 작동 (static=>자동 저장)
 *                10=>"10" , true=>"true"
 *                String.valueOf(데이터형)
 *                Math.random()
 *             추상메소드 : 설계 => 모든 개발자가 같은 메소드를 제어
 *                           => 표준화 작업 
 *                           => 여러개의 클래스를 묶어서 한개의 이름으로 제어 
 *                  동물 => 먹는다;, 걷는다; ...
 *                   |
 *               -----------
 *               |    |    |
 *              인간   개   말....
 *             종단메소드 : final void aaa() => 변경할 수 없는 메소드 (확장없음)
 *          
 *       3) 생성자 : 5%
 *            = 객체 생성시 호출되는 메소드 
 *            = 멤버변수의 초기화 
 *            = 클래스명과 동일 
 *            = 리턴형이 없다 
 *            = 생성자는 여러개 존재할 수 있다 (오버로딩)
 *            = 클래스안에 생성자를 반드시 구현하는 것은 아니다
 *              => 기본 생성자를 추가 한다 
 *                 --------- 매개변수가 없는 생성자 
 *       = 변수만 모아서 관리 : 사용자 정의 데이터형 (~VO,~DTO,~Bean)
 *           getter/setter는 메소드 (변수의 기능: 읽기/쓰기)
 *       = 메소드만 모아서 관리 : 액션 클래스 
 *                           ~System,~DAO,~Manager,~Service...
 *       = 변수+메소드 : 조립 
 *                     ~Model , ~Controller(Spring) , ~Action
 *    2. 클래스 설계
 *       1. 기능 설계 : 메소드 추출
 *       2. 기능에서 사용하는 변수 추출 
 *       3. 클래스 설계
 *          class ClassName
 *          {
 *             변수 
 *             메소드 
 *             생성자
 *          }
 *       4. 메모리 저장 
 *          ClassName c=new ClassName()
 *       5. 활용 
 *          c.메소드...
 *       6. 소멸 
 *          c=null
 *    3. 접근지정어
 *       --------------------------
 *       private : 자신의 클래스에서만 접근이 가능 => 데이터보호(캡슐화)
 *       --------------------------
 *       default : 같은 패키지안에서만 접근이 가능 
 *       --------------------------
 *       protected : 같은 패키지안에서만 접근이 가능,상속이 있는 경우 다른 패키지에 접근이 가능
 *       --------------------------
 *       public : 패키지 상관없이 모든 클래스에 접근이 가능 
 *       --------------------------
 *       멤버변수 [접근지정어] 데이터형 변수명  
 *       메소드 [접근지정어][제어어] 리턴형 메소드명(매개변수목록)
 *             {        ------- static , abstract , final
 *                
 *             }
 *       ==> 변수 : private
 *           메소드 : public 
 *           생성자 : public 
 *    4. 객체지향의 특성
 *       1) 캡슐화 => 데이터를 은닉화한후에 메소드를 통해서 접근 가능 
 *                  -------------private => getter/setter
 *       2) 재사용 
 *           => 상속 (is-a) : 기존의 기능을 변경해서 사용 
 *             ** 개발자들이 겁이 많아서...
 *             class A
 *             {
 *             }
 *             class B extends A => 단일상속 
 *             {
 *             }
 *           => 포함 (has-a) : 기존의 기능을 있는 그대로 사용
 *             class A
 *             {
 *             }
 *             class B
 *             {
 *                 A a;
 *             } 
 *       3) 수정 , 추가 => 다형성 
 *          오버라이딩 , 오버로딩 
 *          --------------------------------
 *          메소드명 동일 
 *          --------------------------------
 *          상속관계     한개 클래스 / 상속 관계
 *          --------------------------------
 *          매개변수 동일   매개변수의 갯수/데이터형 
 *          --------------------------------
 *          리턴형 동일     리턴형은 관계없다
 *          --------------------------------
 *          접근지정어 확장 
 *            기능 수정        새로운 기능 추가
 *          --------------------------------
 *    5. 제어자 
 *       static / abstract / final 
 *       => static final  : 상수
 *       => final : 상수형 변수 ==> 메소드안에서 사용이 가능 
 *          ------ 사용하는 위치 (오라클 주소,계정명,비밀번호)
 */
public class 객체지향정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
